/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        
        LinkedList sorted = new LinkedList(); 
        ListNode sortedHead = null;
        
        ListNode current1 = list1;
        ListNode current2 = list2;
        
         // System.out.println("starting values = " + list1.val + list2.val);
     
        //setting the head.
          if(sortedHead == null && current1.val > current2.val){ sortedHead = current2;}
          if(sortedHead == null && current2.val > current1.val){sortedHead = current1;}
          if(sortedHead == null && (current1.val == current2.val) ){sortedHead = current1;}
        
       while(current1.next != null && current2.next != null){
           //compare the current value, lowest goes first, if equal then don't matter insert both, 
           //Make a if condition where one of them is null and the other isn't
           
           if(current1.val > current2.val){
              sorted.add(current2);
              current2 = current2.next;
                System.out.println(current2.val);
           }
           
           else if(current2.val > current1.val){
              sortedHead = current1; 
              sorted.add(current1);
              current1 = current1.next; 
           }
           
           else{
               // System.out.println("Equal values detected");
               sorted.add(current1);
               sorted.add(current2);
               current1 = current1.next;
               current2 = current2.next; 
           }
           if(list1 != null ){sorted.add(current1.next);}
           if(list2 != null){sorted.add(current2.next);}
           
       }
        return sortedHead; 
    }
}