//Time complexity: O(n)
//Spacial complexity: O(1)
//Two pointer method. Akin to find linkedlist cycle. 
class Solution {
    public int findDuplicate(int[] nums) {
        int slow = 0, slow2 = 0, fast = 0; 
        //Stopping point will be the intersection of slow and fast
        while(true){
            slow = nums[slow]; 
            fast = nums[nums[fast]]; 
            if(slow == fast) break; 
        }
        //When slow and slow2 meet they will always meet at the duplicate number, aka the cycle's begining
        while(true){
            slow = nums[slow];
            slow2 = nums[slow2];

            if(slow == slow2) return slow;
        }
    }
}