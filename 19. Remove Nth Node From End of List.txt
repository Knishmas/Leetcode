//Optimal solution - single pass no data structures. 
class Solution {
    //Run time complexity: O(n), 
    //Spacial complexity: O(1)
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if (head == null || head.next == null) return null;
        ListNode dummy = new ListNode(0); 
        dummy.next = head; 
        ListNode slow = dummy, fast = dummy; 

        //get fast pointer to the nth node from dummy
        while(n > 0){
            fast = fast.next; 
            n--;
        }
        //Get fast to the last node and slow to the node before the Nth Node From End of List.
        while(fast.next != null){
            fast = fast.next; 
            slow = slow.next; 
        }
        //re-assign pointer
        slow.next = slow.next.next; 
        
        
        return dummy.next; 
    }
}
-----------------------------------------------------------------------------------------------------------------------------------

//Stack solution: This could be done in a single pass improving runtime and without the use of a data structure like the stack.
class Solution {
    //Run time complexity: O(n), 
    //Spacial complexity: O(n)
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if(head.next == null && n == 1) return null; 
        ListNode current = head; 
        Stack<ListNode> reverseList = new Stack<>(); 
        int nodesLeft = n;
        int totalNodes = 0;
        ListNode nthFrontNode = null, nthBehindNode = null, nthNode = null;  

        //Traversing through the end of the list and pushing all nodes to stack 
        while(current != null){
            reverseList.push(current); 
            current = current.next; 
            totalNodes++;
        }

        //In the case where head is nth node from the end. 
        if(totalNodes == n){
            head = head.next; 
            return head; 
        }

        //stops at nth node from end 
        while(nodesLeft > 0){
            nthNode = reverseList.pop(); 
            nthFrontNode = nthNode.next;
            --nodesLeft;  
        }

        if(!reverseList.isEmpty() ){
            nthBehindNode = reverseList.pop(); 
            nthBehindNode.next = nthFrontNode;
        }
        nthNode.next = null; 
        return head; 
    }
}
