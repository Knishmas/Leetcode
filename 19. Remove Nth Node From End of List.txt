/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        int sizeCounter = 0;
        int targetPosition = 0;
        int tempCounter = 1;
        
        ListNode current = head;
            
        if (head == null){return null;}
        if (n == 0){return head;}
           
        
        
        while (current != null){
            sizeCounter++;
            current = current.next;  
            
        }
        
        if(sizeCounter == 1 && n == 0){
            return head;
        }
        
        if(sizeCounter == 1 && n == 1){
            return null;
        }
        
        targetPosition = sizeCounter - n;
        
         current = head;
        
        for(int i = 0; i < sizeCounter; i++){
            

            if(tempCounter == targetPosition){
                current.next = current.next.next;
            }            
            
            if( current.next == null ){
                return head;
            }
            tempCounter++;
            current = current.next;
            
        }
        
        
        return head;
    }
}

//We need to find out how many steps until our right side first
//We could do this by while  current.next !=
//.