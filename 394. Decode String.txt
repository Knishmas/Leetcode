//Solution: We'll have 4 cases when analyzing the string
//1. an integer: we push it onto an a stack tracking the # of repeats
//2. "[" indicates the start of a new string: push previous string and set it to empty 
//3. Character: We add this to our current string
//4. "]" the end of our string: pop our string and the repeat # in order to create a string with strinbuilder 

class Solution {
    public String decodeString(String s) {
        if(s.length() == 1 && !Character.isDigit(s.charAt(0))) return s;
        
        Stack<Integer> repeatCounter = new Stack<>(); 
        Stack<String> strings = new Stack<>(); 
        
        String decoded = "";
        if(s.length() == 1 && Character.isDigit(s.charAt(0))) return decoded;
        int index = 0; 

        while(index < s.length()){

            if(s.charAt(index) == '['){
                strings.push(decoded);
                decoded = "";
                index++;
            }else if (s.charAt(index) == ']'){
                int repeats = repeatCounter.pop(); 
                StringBuilder currentString = new StringBuilder(strings.pop()); 
                //Appending repeats of current string
                for(int i = 0; i < repeats; i++){
                    currentString.append(decoded);
                }
                 decoded = currentString.toString();
                index++;
            }else if(Character.isDigit(s.charAt(index))){
                int count = 0;
                while(Character.isDigit(s.charAt(index))){
                    count = 10 * count +(s.charAt(index) - '0');
                    index+=1; 
                }
                repeatCounter.push(count);
            } else{
                 decoded += s.charAt(index);
                 index++;
            }
        }
        return decoded; 
    }
}