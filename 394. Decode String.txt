class Solution {
    public String decodeString(String s) {
        Stack<Integer> repeats = new Stack<>(); 
        Stack<String> strings = new Stack<>();
        int index = 0; 
        String result = "";
        
        //4 possible cases. 
        while(index < s.length()){
            //When we come across a digit
            if(Character.isDigit(s.charAt(index))){
                int count = 0;
                while(Character.isDigit(s.charAt(index))){
                    //Is able to handle single digit numbers AND greater
                    count = 10 * count +(s.charAt(index) - '0');
                    index+=1; 
                }
                repeats.push(count);
            } else if(s.charAt(index) == '[' ){
                //Start of a new string
                strings.push(result);
                result = "";
                index+=1;
                //When we reach the end of a encoded string
            } else if (s.charAt(index) == ']'){
                int currentRepeats = repeats.pop(); 
                StringBuilder currentString = new StringBuilder(strings.pop()); 
                //Appending repeats of current string
                for(int i = 0; i < currentRepeats; i++){
                    currentString.append(result);
                }
                 result = currentString.toString();
                index+=1;
                //if we come across a char
            } else{
                //building string
                result += s.charAt(index); 
                index+=1; 
            }
        }
        return result;
    }
}