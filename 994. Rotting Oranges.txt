class Solution {
    public int orangesRotting(int[][] grid) {
        Set<String> fresh = new HashSet<>();
        Set<String> rotten = new HashSet<>();
        
        //populating both fresh and rotten Hashsets
        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid[i].length; j++){
                if(grid[i][j] == 1){
                    fresh.add(""  + i + j);
                } else if(grid[i][j] == 2){
                    rotten.add("" + i + j);
                }
            }
        }
        
        int minutes = 0;
            
        //up, down, left, right
        int[][] directions = {{-1,0}, {1,0},{0,-1},{0,1}};
            
        while(fresh.size() > 0){
            Set<String> infected = new HashSet<>();
            for(String s: rotten){
                int i = s.charAt(0) - '0';
                int j = s.charAt(1) - '0';
                //checking the directions for fresh oranges to infect
                for(int[] direction: directions){
                    int nextI = i + direction[0];
                    int nextJ = j + direction[1];
                    //infecting neighboring oranges
                    if(fresh.contains("" + nextI + nextJ )){
                        fresh.remove(("" + nextI + nextJ));
                        infected.add(("" + nextI + nextJ));            
                    }
                }
            }
            //In the case that there's at least 1 fresh orange we can't infect
            if(infected.size() == 0){
                return -1; 
            }
            rotten = infected;
            minutes++; 
        }
            
        return minutes; 
    }
}