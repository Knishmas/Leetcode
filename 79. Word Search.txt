class Solution {
    public boolean exist(char[][] board, String word) {
        
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[i].length; j++){
                if(board[i][j] == word.charAt(0) && dfs(board, word, i, j ,0) ){
                    return true;
                }
            }
        }
        return false;            
}
    
      public boolean dfs(char[][] board, String word, int i, int j ,int count){
            if(count == word.length()) return true; 
            
            //Checking bounds & if next char in board matches next char in word
            if(i < 0 || i >= board.length || j < 0 || j >= board[i].length || word.charAt(count) != board[i][j] ){
                return false; 
            }
            char temp = board[i][j];
            //Setting current board index to empty so that it can'tn be re-used. 
            board[i][j] = ' '; 
            
            //checking up, down, left, and right
            boolean found = dfs(board, word, i - 1, j, count + 1) ||
            dfs(board, word, i + 1, j, count + 1) ||
            dfs(board, word, i, j - 1, count + 1) ||
            dfs(board, word, i, j + 1, count + 1);        
            //adding char back to board index.
          
            board[i][j] = temp;  
            //Did we found the remainder of the word or not. 
            return found;         
    }
    
}

