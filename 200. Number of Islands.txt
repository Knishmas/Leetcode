class Solution {
    int islands = 0; 
    public int numIslands(char[][] grid) {
        //traversing the graph
        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid[i].length; j++){
                //if we find an island
                if(grid[i][j] == '1'){
                    islands++;
                    DFS(grid,i,j); 
                }
            }
        }

        return islands;
    }

    public void DFS(char[][] grid,int i, int j){
        //If out of bounds or value is 0;
        if(i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] == '0'){
            return; 
        }
        //Turning current index value to 0 so that we don't traverse it again
        grid[i][j] = '0'; 
        //Checking up
        DFS(grid, i-1, j);
        //Checking down
        DFS(grid, i + 1, j);
        //Checking left
        DFS(grid, i, j - 1);
        //Checking right
        DFS(grid, i, j + 1);
    }
}