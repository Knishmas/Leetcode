class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {

        if(candidates == null) return null; 
         List<List<Integer>> possibleCombinations = new ArrayList<>(); 
        
        getCombinations(candidates, 0,target,new ArrayList<>(), possibleCombinations);
        return possibleCombinations; 
    }
    
    
    public void getCombinations(int[] candidates, int index, int target, List<Integer> currentCombination, List<List<Integer>> result){
        if(target == 0)result.add(new ArrayList<>(currentCombination));
        
        for(int i = index; i < candidates.length; i++){
            if(candidates[i] <= target){
                currentCombination.add(candidates[i]);
                getCombinations(candidates,i,target - candidates[i], currentCombination, result);
                currentCombination.remove(new Integer(candidates[i]));
            }
        }
        
        
        
    }
    
}