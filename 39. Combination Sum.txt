class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
         List<List<Integer>> combinations = new ArrayList<>(); 
         backtrack(candidates, target, combinations, new ArrayList<>(), 0); 
         return combinations; 
    }

    public void backtrack(int[] candidates, int target, List<List<Integer>> combinations, List<Integer> currCombination, int index){
        if(target == 0)combinations.add(new ArrayList<>(currCombination)); 
        else if(target < 0) return;
        else{
            for(int i = index; i < candidates.length; i++){
                if(candidates[i] <= target){
                    currCombination.add(candidates[i]); 
                    backtrack(candidates, target - candidates[i], combinations, currCombination, i); 
                    currCombination.remove(currCombination.size() - 1);
                }
            }
        }
    }
}