class Solution {
    public int search(int[] nums, int target) {
        //Runtime complexity:O(logn)
        //Spacial complexity: O(1)

        int left = 0; 
        int right = nums.length -1; 
        //Find minimum through modified binary search, taking into account possible rotation. 
        while(left < right){
            int middle = left + (right - left) / 2;
            if(nums[middle] > nums[right]){
                left = middle + 1; 
            } else{
                right = middle;
            }
        }

        //resetting bounds and setting them according to which side of of the array we should search. 
        int start = left; 
        left = 0;
        right = nums.length -1; 

        if(target >= nums[start] && target <= nums[right]){
            left = start; 
        } else{
            right = start;
        }
        
        //regular binary seearch
        while(left <= right){
             int middle = left + (right - left) /2;
             if(nums[middle] == target){
                 return middle;
             } else if(nums[middle] < target){
                 left = middle + 1;
             } else{
                 right = middle - 1;
             }
        }
        //if not found 
        return -1;
    }
}