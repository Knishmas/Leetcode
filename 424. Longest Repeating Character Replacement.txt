class Solution {
    //Time complexity: O(n)
    //Spacial Complexity: O(1)
    public int characterReplacement(String s, int k) {
        if(s.length() == 1) return 1; 

        int currMostFreq = 0;
        int maxRepeating = 0; 
        int left = 0;
        int[] charFreq =  new int[26];

        for(int right = 0; right < s.length(); right++){
            //increment current char index that right is at
            charFreq[s.charAt(right) - 'A']++;
            //Check if able to update currMostFreq. 
            currMostFreq = Math.max(currMostFreq, charFreq[s.charAt(right) - 'A']);
            //Window size - mostFreq char = # of different chars. When we can't use up anymore k's. 
            //Update window, increment left
            if(right - left + 1 - currMostFreq > k){
                 charFreq[s.charAt(left) - 'A']--;
                 left++;
            }
            maxRepeating = Math.max(maxRepeating, right - left + 1);
        }
        return maxRepeating; 
    }
}