class Solution {
    //Time complexity: O(n)
    //Spacial complexity: O(n) It's possible every char could be unique within the input. 
    public int lengthOfLongestSubstring(String s) {
         //edge case: string is empty
         if(s.length() == 0) return 0; 
         int maxLength = 0;
         //pointers left and right to analyze window of substrings
         int left = 0; 
         int right = 0; 
         HashSet<Character> charTracker = new HashSet<>(); 

        //Traversing s 
         while(right < s.length()){
            //Duplicate found
             if(charTracker.contains(s.charAt(right))){
                charTracker.remove(s.charAt(left));
                left++;
            //Unique char for substring
             } else{
                charTracker.add(s.charAt(right));
                right++; 
                maxLength = Math.max(charTracker.size(), maxLength);
             }
         }

         return maxLength; 
    }
}