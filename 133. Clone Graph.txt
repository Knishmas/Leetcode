//DFS Solution
//Time complexity: O(V+E). V for vertex and E for edge. 
//Space complexity: O(n)
class Solution {
    HashMap<Integer, Node> nodeMap = new HashMap<>(); 
    public Node cloneGraph(Node node) {
        //Edge case
        if(node == null) return null; 
        //If cloned node already exists, return it
        if(nodeMap.containsKey(node.val)) return nodeMap.get(node.val); 
        //Creating clone
        Node newNode = new Node(node.val, new ArrayList<Node>()); 
        //Adding clone to hashmap
        nodeMap.put(node.val, newNode);
        //For every neighbor our current node has, recursively add it to the clone Node's neighbor list. 
        for(Node neighbor : node.neighbors){
            newNode.neighbors.add(cloneGraph(neighbor));
        }
        return newNode; 
    }
}