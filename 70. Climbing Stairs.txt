70. Climbing stairs
4 solutions worst to best.

1. Recursive
2. Top down DP (Recursion & memoization)
3. Bottom up DP (Tabulation)
4. Bottom up O(1) space (no tabulation)

//-----------------------------------------------------------------
/ Recursive solution
 //Complexity : Time: O(2^n) ; Space: O(n)

    public int climbStairs(int n) {
        if(n == 0) return 0; 
        if(n == 1) return 1; 
        if(n == 2) return 2; 
        
        return (climbStairs(n - 1) + climbStairs(n - 2)); 
    }

//-----------------------------------------------------------------
 //Top down DP approach 
 //Complexity : Time: O(n) ; Space: O(n)

    public int climbStairs(int n) {
        //edge case 
        if (n == 1) return 1;
        int dp[] = new int[n + 1];
        dp[0] = 0;
        dp[1] = 1;
        dp[2] = 2;
        return recurse(n, dp);

    }
    //helper func
    public int recurse(int n, int[] dp){
        //base case
        if(dp[n] != 0) return dp[n]; 
        //memoization
        dp[n] = (recurse(n - 1, dp) + recurse(n-2, dp)); 
        return dp[n];
    }

//-----------------------------------------------------------------

//Bottom up DP approach
 //Complexity : Time: O(n) ; Space: O(n)

    public int climbStairs(int n) {
        //edge case
        if(n <= 1) return n;
        int dp[] = new int[n + 1]; 
        dp[0] = 0; 
        dp[1] = 1; 
        dp[2] = 2; 
        
        for(int i = 2; i < n; i++){
            dp[i + 1] = dp[i - 1] + dp[i];
        }
        return dp[n];
    }
//-----------------------------------------------------------------

//Optimized solution: Bottom up O(1) space, no tabulation

//Complexity : Time: O(n) ; Space: O(1)
    
    public int climbStairs(int n) {
        //edge case
        if(n <= 2) return n;

        // No tabulation required, we only need the last 2 values in order to build up our max # of ways.
        int prev1 = 1;
        int prev2 = 2;
        int maxWays = 0;

        for(int i = 2; i < n; i++){
            //updating values
            maxWays = prev1 + prev2; 
            prev1 = prev2; 
            prev2 = maxWays;
        }
        return maxWays;
    }
}