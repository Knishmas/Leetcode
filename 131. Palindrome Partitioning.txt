class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> palindromes = new ArrayList<>(); 
        backtrack(s, palindromes, new ArrayList<>(), 0);
        return palindromes;
    }
    //backtracking func
    public void backtrack(String s, List<List<String>> palindromes, List<String> currList, int index){
        //base case 
        if(index == s.length()) palindromes.add(new ArrayList<>(currList));

        for(int i = index; i < s.length(); i++){
            //backtracking only if substring is a palindrome
            if(isPalindrome(s, index, i)){
                currList.add(s.substring(index, i + 1));
                backtrack(s, palindromes, currList, i + 1);
                currList.remove(currList.size() -1 ); 
            }
        }
    }
    //helper function to check if substring is a palindrome 
    public boolean isPalindrome(String s, int left, int right){
        //two pointer checking until passed middlepoint of word
        while(left <= right){
            if(s.charAt(left++) != s.charAt(right--)) return false; 
        }
        return true;
    }
}