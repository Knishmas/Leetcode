class Solution {
    //Run time complexity: O(n)
    //Spacial complexity: O(1)
    public int maxProfit(int[] prices) {
        if(prices.length == 1) return 0; 
        int maximumProfit = 0;
        int currentMin = prices[0]; 
        //Iterate through prices
        for(int i = 0; i < prices.length; i++){
             //Calculate sum with current min and price[i]
            if(prices[i] > currentMin){
               maximumProfit = Math.max(prices[i] - currentMin, maximumProfit);
            }else{
                 // if there's a new min set min to it.
                currentMin = prices[i]; 
            }
        }

        return maximumProfit; 
    }
}