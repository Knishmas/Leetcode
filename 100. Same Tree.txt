//Time Complexity: O(n)
//Space Complexity: O(h) where h is the height of the tree
//Worst case: O(n) where we have all nodes skewed on one side of the tree
//Best case: O(logn) where we are given a well balanced tree.
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        //base case
        if(p == null && q == null){
            return true;
        //When one sub-tree has reached it's end and the other hasn't
        } else if(p == null || q == null){
            return false; 
        //Tree values don't match
        } else if(p.val != q.val){
            return false;
        } else{
        //Check if both subtrees are the same
            return isSameTree(p.left, q.left) && isSameTree(p.right, q.right); 
        }
    }
}