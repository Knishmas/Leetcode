//Iterative solution 
//Time Complexity: O(n)
//Space Complexity:O(n)
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> inorderList = new ArrayList<>(); 
        //base case 
        if (root == null) return inorderList; 
        Stack<TreeNode> stack = new Stack<>(); 
        TreeNode current = root; 

    
    while(current != null || !stack.isEmpty()){
        //traverse left anytime we can 
        while(current != null){
            stack.push(current);
            current = current.left;
        }
        current = stack.pop();
        inorderList.add(current.val); 
        current = current.right; 
    }

    return inorderList; 
    }
} 

//----------------------------------------------------------------------
//Recursive solution.
//Time complexity: O(n)
//Spacial complexity: O(n)
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> inorderList = new ArrayList<>(); 
        helper(root, inorderList); 
        return inorderList; 
    }

    public void helper(TreeNode root, List<Integer> list){
        if(root == null) return; 
        helper(root.left, list); 
        list.add(root.val); 
        helper(root.right, list);
        
    }
}