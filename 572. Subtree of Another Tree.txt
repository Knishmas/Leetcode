class Solution {
    //Time Complexity: O(m*n), m being the # of nodes in root and n being the # of nodes in subRoot
    //Space Complexity: Minumum between m & n. 
    public boolean isSubtree(TreeNode root, TreeNode subRoot) {
        //base case
        if(root == null){
            return false;
        //checking if same tree
        } else if(isSameTree(root,subRoot)){
            return true;
        } else{
        //Go down the Tree checking subtrees 
            return isSubtree(root.left,subRoot) || isSubtree(root.right,subRoot); 
        }
    }
    public boolean isSameTree(TreeNode root,TreeNode subRoot){
            //base case
            if(root == null && subRoot == null){
                return true; 
            //when a tree has reached its end and the other hasn't
            } else if(root == null || subRoot == null){
                return false;
            //if values don't match
            } else if(root.val != subRoot.val){
                return false;
            } else{
                //checking that both left and right subtrees match. 
                return isSameTree(root.left, subRoot.left) && isSameTree(root.right, subRoot.right);
            }
        }
}