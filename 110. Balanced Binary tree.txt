//Time Complexity: O(n)
//Spacial Complexity: O(n)
class Solution {
    //Solution: Get height of left sub-tree and right subtree: get the absolute value of them being subtracted and if > 1 return false Otherwise return true 
    boolean isBalance = true; 
    public boolean isBalanced(TreeNode root) {
        //if binary tree is empty
        if(root == null) return isBalance; 
        checkBalance(root);
        return isBalance; 
    }
    public int checkBalance(TreeNode root){
        //base case or end imbalance found
        if(root == null || !isBalance) return 0;

        int left = checkBalance(root.left);
        int right = checkBalance(root.right);
        //Checking if subtrees are balanced AKA height difference !> 1
        if (Math.abs(left - right) > 1) isBalance = false; 
        return 1 + (Math.max(left, right));
    }
}