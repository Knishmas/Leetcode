//Time complexity: O(n)
//Space complexity: O(n)
class Solution {
    public String removeDuplicates(String s, int k) {
        //Use a stack to hold int arrays being [charVal, frequency]
        Stack<int[]> charFreq = new Stack<>(); 
        //Iterate through String s
        for(Character currentChar : s.toCharArray()){
             //if the stack isn't empty and top of the stack matches current char
            if(!charFreq.isEmpty() && charFreq.peek()[0] == currentChar){
                 //increment it's frequency
                charFreq.peek()[1]++;
            } else{
                //create a new array with the char in the first position and frequency of 1 in the second 
                charFreq.push(new int[]{currentChar, 1});
            }    
            // if the top of the stacks char frequency = k then pop it from the stack 
            if(charFreq.peek()[1] == k){
                charFreq.pop(); 
            } 
        }
        
        //Create a stringbuilder for the chars in stack 
        StringBuilder result = new StringBuilder(); 
        
        //while the stack isn't empty append popped char to the stringbuilder
        while(!charFreq.isEmpty()){
            int[] currentPair = charFreq.pop();
            while(currentPair[1]-- > 0){
                result.append((char) currentPair[0]); 
            }
        }
        //return stringbuilder reversed because of the stack and as a string. 
        return result.reverse().toString();
    }
}