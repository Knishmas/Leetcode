//Time complexity: O(n)
//Space complexity: O(n)
class Solution {
    public String removeDuplicates(String s) {
        int i = 0; 
        char[] stack = new char[s.length()];

        for(int j = 0; j < s.length(); j++){
            char current_char = s.charAt(j);
            //if our current char matches the top of the stack then pop the char. 
            if(i > 0 && stack[i-1] == current_char){   
                i--;
            //else insert char and updated top of the stack. 
            } else{
                stack[i] = s.charAt(j); 
                i+= 1;
            }
        }
        return new String(stack,0,i);
    }
}